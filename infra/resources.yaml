AWSTemplateFormatVersion: "2010-09-09"

######################################################
# Parameters:
######################################################
Parameters:
  ObjectKeyPrefix:
    Type: String
  EnvName:
    Type: String
    AllowedValues:
      - dev
      - staging1
      - staging2
      - staging3
      - staging4
      - staging5
      - prod
    Description: Enter profile.
  NameTag:
    Type: String
    Default: neo-ticket
    AllowedValues:
      - neo-ticket
######################################################
# Mappings:
######################################################
Mappings:
  StackConfig:
    ManagedPolicyArns:
      AWSLambdaBasicExecutionRole: arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    NameTag:
      Value: neo-ticket

######################################################
# Resources:
######################################################
Resources:
  #-----------------------
  # ポリシー作成
  #-----------------------
  DynamoWriteAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: authorize to write item into main dynamodb 
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Resource:
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/CRAWLING_RESULT-${EnvName}

  DynamoReadAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: authorize to get item from user dynamodb 
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:Query
            Resource:
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/CRAWLING_RESULT-${EnvName}
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/CRAWLING_RESULT-${EnvName}/index/*

  PutEventPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: authorize to full access to sqs
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - events:PutEvents
            Resource:
              - "*"

  S3Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: authorize s3 access
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:putObject
              - s3:Get*
              - s3:List*
            Resource:
              - "*"
              
  #-----------------------
  # ロールの作成
  #-----------------------
  RoleLambda:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - ${NameTag}-${EnvName}-lambda-role
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }
      ManagedPolicyArns:
        - !FindInMap [StackConfig, ManagedPolicyArns, AWSLambdaBasicExecutionRole]
        - !Ref DynamoWriteAccessPolicy
        - !Ref DynamoReadAccessPolicy
        - !Ref PutEventPolicy
        - !Ref S3Policy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com

  #----------------------------------------------
  # CRAWLING_RESULT
  #----------------------------------------------
  CRAWLINGRESULT:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      TableName: !Sub CRAWLING_RESULT-${EnvName}
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  #----------------------------------------------
  # SEAT
  #----------------------------------------------
  SEAT:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      TableName: !Sub SEAT-${EnvName}
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  #----------------------------------------------
  # S3 Bucket
  #----------------------------------------------
  S3CrawlingBucket:
    Type: 'AWS::S3::Bucket'
    DependsOn: LambdaPersistCrawlingResultTriggerPermission
    Properties:
      BucketName: !Sub
        - ${NameTag}-${EnvName}-crawling
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256  
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: txt
            Function: !GetAtt
              - LambdaPersistCrawlingResult
              - Arn

  #----------------------------------------------
  # lambda
  #----------------------------------------------
  LambdaBatchAssignCrawling:
    Type: AWS::Lambda::Function
    Properties:
      Description: クロール対象割当処理
      Code:
        S3Bucket: !Sub ${NameTag}-${EnvName}-release
        S3Key: !Sub ${ObjectKeyPrefix}/Deploy.zip
      Environment:
        Variables:
          ENV_NAME: !Ref EnvName
      FunctionName: !Sub ${NameTag}-${EnvName}-BatchAssignCrawling
      Handler: src/main/application/crawling/BatchAssignCrawling/index.handler
      Role: !GetAtt RoleLambda.Arn
      Runtime: nodejs12.x
      Timeout: 900
  
  LambdaCrawlVacantSeat:
    Type: AWS::Lambda::Function
    Properties:
      Description: 空席クロール処理
      Code:
        S3Bucket: !Sub ${NameTag}-${EnvName}-release
        S3Key: !Sub ${ObjectKeyPrefix}/Deploy.zip
      Environment:
        Variables:
          ENV_NAME: !Ref EnvName
      FunctionName: !Sub ${NameTag}-${EnvName}-CrawlVacantSeat
      Handler: src/main/application/crawling/CrawlVacantSeat/index.handler
      Role: !GetAtt RoleLambda.Arn
      Runtime: nodejs12.x
      Timeout: 900
      MemorySize: 300
  
  LambdaPersistCrawlingResult:
    Type: AWS::Lambda::Function
    Properties:
      Description: 空席クロール結果永続化処理
      Code:
        S3Bucket: !Sub ${NameTag}-${EnvName}-release
        S3Key: !Sub ${ObjectKeyPrefix}/Deploy.zip
      Environment:
        Variables:
          ENV_NAME: !Ref EnvName
      FunctionName: !Sub ${NameTag}-${EnvName}-PersistCrawlingResult
      Handler: src/main/application/crawling/PersistCrawlingResult/index.handler
      Role: !GetAtt RoleLambda.Arn
      Runtime: nodejs12.x
      Timeout: 900
      MemorySize: 2048
  
  LambdaPersistCrawlingResultTriggerPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt 
        - LambdaPersistCrawlingResult
        - Arn
      Principal: "s3.amazonaws.com"
      SourceArn: !Sub arn:aws:s3:::${NameTag}-${EnvName}-crawling

  LambdaPersistVacantSeat:
    Type: AWS::Lambda::Function
    Properties:
      Description: 空席永続化処理
      Code:
        S3Bucket: !Sub ${NameTag}-${EnvName}-release
        S3Key: !Sub ${ObjectKeyPrefix}/Deploy.zip
      Environment:
        Variables:
          ENV_NAME: !Ref EnvName
      FunctionName: !Sub ${NameTag}-${EnvName}-PersistVacantSeat
      Handler: src/main/application/crawling/PersistVacantSeat/index.handler
      Role: !GetAtt RoleLambda.Arn
      Runtime: nodejs12.x
      Timeout: 900
      MemorySize: 300

  LambdaPersistVacantSeatEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt SEAT.StreamArn
      FunctionName: !Ref LambdaPersistVacantSeat
      StartingPosition: TRIM_HORIZON

  ######################################################
  # Event Bus
  ######################################################
  EventBus:
    Type: AWS::Events::EventBus
    Properties: 
      Name: !Sub ${NameTag}-${EnvName}-event-bus

  BatchAssignCrawlingRule:
    Type: AWS::Events::Rule
    Properties: 
      # EventBusName: !GetAtt
      #   - EventBus
      #   - Name
      Name: !Sub ${NameTag}-${EnvName}-BatchAssignCrawling-rule
      # RoleArn: String
      ScheduleExpression: cron(* * * * ? *)
      State: ENABLED
      Targets: 
        - Arn: !GetAtt
            - LambdaBatchAssignCrawling
            - Arn
          Id: !Ref LambdaBatchAssignCrawling
  
  LambdaBatchAssignCrawlingEventBusPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaBatchAssignCrawling
      Principal: events.amazonaws.com
      SourceArn: !GetAtt
        - BatchAssignCrawlingRule
        - Arn

  AssignCrawlingRule:
    Type: AWS::Events::Rule
    Properties: 
      EventBusName: !GetAtt
        - EventBus
        - Name
      EventPattern:
        detail-type: 
          - AssignCrawling
      Name: !Sub ${NameTag}-${EnvName}-AssignCrawling-rule
      State: ENABLED
      Targets: 
        - Arn: !GetAtt
            - LambdaCrawlVacantSeat
            - Arn
          Id: !Ref LambdaCrawlVacantSeat
  
  LambdaCrawlVacantSeatEventBusPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaCrawlVacantSeat
      Principal: events.amazonaws.com